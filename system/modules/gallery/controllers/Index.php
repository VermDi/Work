<?php
/**
 * Created by PhpStorm.
 * User: Евгения
 * Date: 30.10.2017
 * Time: 11:13
 */

namespace modules\gallery\controllers;


use core\Controller;
use core\Html;
use core\Tools;

use modules\gallery\models\Image;
use modules\gallery\helpers\ImageUpload;

/**
 * @property-read Image $image
 *
 * Class Index
 * @package modules\realty\controllers
 */
class Index extends Controller
{
    public $image;

    public function init()
    {
        $this->setImage(new Image());
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function actionChangePosition()
    {
        $image = $this->image->clear()->getOne($_POST['id']);
        if ($_POST['direction'] == 'up') {
            $imagePrevious = $this->image->clear()->where(['key_id' => $image->key_id, 'module_name' => $image->module_name, 'position' => $image->position - 1])->getOne();
            $this->image->clear()->factory($image->id);
            $this->image->position--;
            $this->image->save();
            $this->image->clear()->factory($imagePrevious->id);
            $this->image->position++;
            $this->image->save();
        }
        if ($_POST['direction'] == 'down') {
            $imageNext = $this->image->clear()->where(['key_id' => $image->key_id, 'module_name' => $image->module_name, 'position' => $image->position + 1])->getOne();
            $this->image->clear()->factory($image->id);
            $this->image->position++;
            $this->image->save();
            $this->image->clear()->factory($imageNext->id);
            $this->image->position--;
            $this->image->save();
        }
        $imageUpload = new ImageUpload($image->module_name . DIRECTORY_SEPARATOR . $image->key_id);
        echo $this->render('gallery.php', ['images' => $this->image->clear()->where(['module_name' => $image->module_name, 'key_id' => $image->key_id, 'temp_id' => $image->temp_id])->orderBy('position ASC')->getAll(), 'temp_id' => $image->temp_id, 'module_name' => $image->module_name, 'key_id' => $image->key_id]);
        exit;

    }

    public function actionDelete()
    {
        $imageOne = $this->image->deleteAndUnlink($_POST['id']);
       // $imageUpload = new ImageUpload($imageOne->module_name . DIRECTORY_SEPARATOR . $imageOne->key_id);
        echo $this->render('gallery.php', ['images' => $this->image->clear()->where(['key_id' => $imageOne->key_id, 'module_name' => $imageOne->module_name, 'temp_id' => $imageOne->temp_id])->orderBy('position ASC')->getAll(), 'temp_id' => $imageOne->temp_id,'module_name' => $imageOne->module_name, 'key_id' => $imageOne->key_id]);
        exit;
    }

    public function actionAjaxImageUpload()
    {

        if (isset($_POST) and $_SERVER['REQUEST_METHOD'] == "POST") {
            $imageUpload = new ImageUpload($_POST['module_name'] . DIRECTORY_SEPARATOR . (!empty($_POST['key_id']) ? $_POST['key_id'] : $_POST['temp_id']));

            $temp_id = "";
            if (empty($_POST['key_id'])) {
                $temp_id = (!empty($_POST['temp_id'])) ? $_POST['temp_id'] : Tools::generateRandomString();
                $params  = ['temp_id' => $temp_id];
            } else {
                $key_id = $_POST['key_id'];
                $params = ['key_id' => $key_id];
            }
            $params['module_name'] = $_POST['module_name'];
            if ($imageUpload->run() === true) {
                if (!empty($imageUpload->image_name)) {
                    $position = $this->image->getMaxPosition($params) + 1;
                    $first    = true;
                    foreach ($imageUpload->image_name as $item) {
                        if ($first && $position == 1) {
                            $main = Image::IS_MAIN;
                        } else {
                            $main = Image::NOT_MAIN;
                        }
                        $this->image->clear()->factory()->fill(array_merge(['image_name' => $item, 'position' => $position, 'is_main' => $main], $params))->save();
                        $position++;
                        $first = false;
                    }
                    echo $this->render('gallery.php', ['images' => $this->image->clear()->where($params)->orderBy('position ASC')->getAll(), 'temp_id' => $temp_id]);
                }

            } else {
                echo $imageUpload->error;
            }
        }
    }


    public function actionSaveTitle()
    {
        if (!empty($_POST)) {
            $this->image->factory()->fill($_POST)->save();
        }
    }

    public function actionSetMainImage()
    {
        $imageOne = $this->image->clear()->getOne($_POST['id']);
        $images   = $this->image->clear()->where(['key_id' => $imageOne->key_id, 'temp_id' => $imageOne->temp_id, 'module_name' => $imageOne->module_name])->getAll();
        foreach ($images as $item) {
            $this->image->clear()->factory($item->id);
            $this->image->is_main = Image::NOT_MAIN;
            $this->image->save();
        }
        $this->image->clear()->factory($imageOne->id);
        $this->image->is_main = Image::IS_MAIN;
        $this->image->save();
        $imageUpload = new ImageUpload($imageOne->module_name . DIRECTORY_SEPARATOR . (!empty($imageOne->key_id) ? $imageOne->key_id : $imageOne->temp_id));
        echo $this->render('gallery.php', ['images' => $this->image->clear()->where(['key_id' => $imageOne->key_id, 'module_name' => $imageOne->module_name, 'temp_id' => $imageOne->temp_id])->orderBy('position ASC')->getAll(), 'temp_id' => $imageOne->temp_id]);
        exit;

    }

    /**
     * @param Image $image
     */
    public function setImage(Image $image)
    {
        $this->image = $image;
    }


}